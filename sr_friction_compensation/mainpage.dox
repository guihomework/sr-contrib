/**
\mainpage
\htmlinclude manifest.html

\b sr_friction_compensation computes the friction compensation map: we move the finger slowly through its range while recording the necessary amount of force to exert while it's moving.


Friction compensation documentation

The purpose of this document is to explain:
  - how friction compensation code is structured and works
  - how to use it
  - what can be improved

\section codeapi Code API

    1) Class diagram

                                                                                               **********************************************************************
                                                                                               * file: u_map_computation_main.py                                    *
                                                                                               * class: FrictionCompensation                                        *
                                                                                               *--------------------------------------------------------------------*
                                                                                               *  string: joint_name                                                *
                                                                                               *  integer: n                                                        *
                                                                                               *  string: hand_number                                               *
                                                                                               *  flaot: P                                                          *
                                                                                               *  float: I                                                          *
                                                                                               *  float: D                                                          *
                                                                                               *  integer: shift                                                    *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                                                                               *  Python_Robot_Lib: lib                                             *                                                                                                                                  %
                                                                                               *  boolean: stopped                                                  *                                                                                                                                  %
                                                                                               *  U_Map_Data_Acquisition_Python: data_acquisition_python            *                                                                                                                                  %
                                                                                               *--------------------------------------------------------------------*                                                                                                                                  %
                                                                                               *  def __init__(joint_name, n, hand_number, P, I, D, shift, lib):    *                                                                                                                                  %
                                                                                               *  def run():                                                        *                                                                                                                                  %
                                                                                               **********************************************************************                                                                                                                                  %
                                                                                                      %                                                                                                                                                                                                %
                                                                                                      %                                                                                                                                                                                                %
                                                                                                      %                                                          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                           %
                                                                                                      %                                                         %%%                                                                                        %                                           %
                                                                                                      %                                                          %                                                                                         %                                           %
  **************************************  ***************************************************         %       ********************************************************                **************************************************         *********************************************         %
  * file: u_map_filer.py               *  * file: u_map_data_acquisiton.py                  *         %       *  file: utilitarian.py                                *                *  file: robot_lib.py                            *         * file: u_map_output.py                     *         %
  * class: U_Map_Filter                *  * class: U_Map_Data_Acquisition                   *         %       *  class: Utilitarian                                  *                *  class: RobotLib                               *         * class: U_Map_Output                       *         %
  *------------------------------------*  *-------------------------------------------------*         %       *------------------------------------------------------*                *------------------------------------------------*         *-------------------------------------------*         %
  *  List[float]: data                 *  *  boolean: stopped                               *         %       *  integer: sign_parameter                             *                *  def __init__()                                *         *  string:joint_name                        *         %
  *  integer: data_length              *  *  string: hand_number                            *         %       *  integer: twos_complement_shift                      *                *  def set_PID(P,I,D,Shift,joint_name, hand_nb)  *         *  Utilitarian: utilitarian                 *         %
  *  List[float]: data_filtered        *  *  string: joint_name                             *         %       *------------------------------------------------------*                *    pass                                        *         *  Python_Robot_Lib = lib                   *         %
  *------------------------------------*  *  string: direction                              *         %       *  def __init__()                                      *                *  def set_imax(imax_value, joint_name, hand_nb) *         *  string: hand_number                      *         %
  *  def __init__()                    *  *  Utilitarian: utilitarian                       *         %       *  def delete_repeated_tuples(position, pid_out)       *                *    pass                                        *         *  float: min_joint_angle                   *         %
  *  def filter_fun(data)              *  *  U_Map_Filter_1o: filter_1o                     *         %       *        return[final_position, final_pid_out]         *                *  def set_max_temperature(temperature_value,    *         *  float: max_joint_angle                   *         %
  *     pass                           *  *  U_Map_Filter_Single_Pos: filter_single_pos     *         %       *  def position_conversion_to_float(position_hex)      *                *                           joint_name, hand_nb) *         *  float: min_osc_angle                     *         %
  **************************************  *  List[float]: position                          *         %       *        return float_position                         *                *    pass                                        *         *  float: max_osc_angle                     *         %
                   ù                      *  List[float]: pid_out                           *       %%%%%   % *  def pid_out_conversion_to_float(pid_out_hex)        *                *  def get_current_value(joint_name, hand_nb)    *         *-------------------------------------------*         %
                   ù                      *  List[float]: position_uniq                     *%%%%%%%  %  %%%%%*        return float_pid_out                          *                *    pass                                        *         *  def __init__(joint_name,                 *         %
                   ù              %%%%%%%%*  List[float]: pid_out_uniq                      *         %     % *  def sort_per_increasing_position(position, pid_out) *                *  def start_record(joint_name, hand_nb)         *         *              hand_number, lib)            *         %
                   ù              %       *  List[float]: position_filtered_1o              *         %       *        return [position_sorted, pid_out_sorted]      *                *    pass                                        *         *  def u_map_computation(position, pid, n)  *         %
                  ùùù            %%%      *  List[float]: pid_out_filtered_1o               *         %       *  def joint_cahracteristics(joint_name, hand_nb)      *                *  def stop_record(process)                      *         *      return [u_map_position, u_map_pid]   *         %
                  ùùù             %       *  List[float]: sorted_position                   *         %       *        return [min_angle, max_angle,                 *                *    pass                                        *         *  def send_umap(u_map_position, u_map_pid) *         %
  **************************************  *  List[float]: sorted_pid_out                    *         %       *                min_osc_angle, max_osc_angle]         *                *  def get_data(data_location)                   *         *      pass                                 *         %
  * file: u_map_filer_1o.py            *  *  List[float]: position_filtered_single_pos      *         %       *  def run_command(command)                            *                *    pass                                        *   %%%%%%*********************************************         %
  * class: U_Map_Filter_1o             *  *  List[float]: pid_out_filtered_single_pos       *         %       *       return result_str                              *                *  def sendupdate(joint_name, hand_nb, value)    *   %                             ù                             %
  *------------------------------------*  *-------------------------------------------------*         %       *  def run_command_wait_free(command)                  *                *    pass                                        *   %                             ù                             %
  *  float: a                          *  *  def __init__(joint_name, hand_nb, direction):  *         %       *       return p                                       *                *  def send_u_map_to_firmware(u_map_position,    *   %                             ù                             %
  *------------------------------------*  *  def measurement_process(P,I,D,shift):          *         %       *  def list_sign(data_list)                            *                *                   u_map_pid_out, direction,    *   %                             ù                             %
  *  def __init__()                    *  *             pass                                *         %       *       return 1 or -1 or 0                            *                *                   joint_name, hand_nb)         *   %                            ùùù                            %
  *  def filter_fun(data)              *  *  def run_data_acquisition(P,I,D,shift):         *         %       *  def set_pos_to_u_map_format(position)               *                *    pass                                        *   %                            ùùù                            %
  *     return data_filtered           *  *             pass                                *         %       *       return u_map_position                          *                **************************************************   %      *********************************************        %
  **************************************  *  data_treatment(position_float,pid_out_float):  *         %       *  def set_pid_to_u_map_format(pid)                    *                                     ù                               %      * file: u_map_output_file.py                *        %
                  ù                       *     return [position_filtered_single_pos,       *         %       *       return u_map_pid_out                           *                                     ù                               %      * class: U_Map_Output_File                  * %      %
                  ù               %%%%%%%%*                pid_out_filtered_single_pos]     *         %       *  def text_file_to_vectors(text_file_name)            *                                     ù                               %      *-------------------------------------------*%%%%%%%%%
                  ù               %       ***************************************************         %       *       return[measured_position_hexa,                 *                                     ù                               %      * string: direction                         * %
                  ù               %                           ù                                       %       *               measured_pid_out_hex]                  *                                    ùùù                              %      *-------------------------------------------*
                 ùùù             %%%                          ù                                       %       *  def write_u_map_in_text_file(u_map_position,        *                                    ùùù                              %      *  def send_umap(u_map_position, u_map_pid) *
                 ùùù              %                           ù                                       %       *       u_map_pid_out, output_file, node_id, direction)*                **************************************************   %      *********************************************
  **************************************                      ù                                       %       *  def ensure_dir(f)                                   *                *  file: python_robot_lib.py                     * % %
  * file: u_map_filer_single_pos.py    *                      ù                                       %       ********************************************************                *  class: Python_Robot_Lib                       *%%%%
  * class: U_Map_Filter_Single_Pos     *                     ùùù                                      %                                         %                                     *------------------------------------------------* %
  *------------------------------------*                     ùùù                                      %                                        %%%                                    *  Utilitarian: utilitarian                      *
  *  List[float]: position_filtered    *  *******************************************************     %                                         %                                     *------------------------------------------------*
  *  List[float]: pid_out_filtered     *  * file: u_map_data_acquisiton_python.py               *     %                                         %                                     *  def __init__()                                *
  *------------------------------------*  * class: U_Map_Data_Acquisition_Python                * %   %                                         %                                     *  def set_PID(P,I,D,Shift,joint_name, hand_nb)  *
  *  def __init__()                    *  *-----------------------------------------------------*%%%%%%                                         %                                     *  def set_imax(imax_value, joint_name, hand_nb) *
  *  def filter_fun(position, pid_out) *  *  boolean: imax_regulation                           * %   %                                         %                                     *  def set_max_temperature(temperature_value,    *
  *     return [position_filtered,     *  *  Robot_Lib: lib                                     *     %                                         %                                     *                           joint_name, hand_nb) *
  *             pid_out_filtered]      *  *  float: position_dead_band                          *     %                                         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*  def get_current_value(joint_name, hand_nb)    *
  **************************************  *  float: initial_imax                                *     %                                                                               *       return result                            *
                                          *  float: imax_inc                                    *     %                                                                               *  def start_record(joint_name, hand_nb)         *
                                          *  float: imax_dec                                    *     %                                                                             % *       return [p, output_file]                  *
                                          *  float: imax_time                                   *     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*  def stop_record(process)                      *
                                          *  float: imax_min_delta_p                            *                                                                                   % *  def get_data(data_location)                   *
                                          *  float: imax_max_delta_p                            *                                                                                     *       return [float_position, float_pid_out]   *
                                          *  float: min_angle                                   *                                                                                     *  def sendupdate(joint_name, hand_nb, value)    *
                                          *  float: max_angle                                   *                                                                                     *  def contrlr(joint_name, hand_nb, options)     *
                                          *  float: min_osc_angle                               *                                                                                   % *  def send_u_map_to_firmware(u_map_position,    *
                                          *  float: max_osc_angle                               *%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*                   u_map_pid_out, direction,    *
                                          *-----------------------------------------------------*                                                                                   % *                   joint_name, hand_nb)         *
                                          *  def __init__(joint_name, direction):               *                                                                                     *  def get_joint_ids(joint_name, hand_nb)        *
                                          *  def measurement_process(P,I,D,shift):              *                                                                                     *       return [node_id, position_sensor, target,*
                                          *  def run_data_acquisition(P,I,D,shift):             *                                                                                     *               motor_debug, smart_motor]        *
                                          *  def drive_to_initial_position(position_deadband):  *                                                                                     **************************************************
                                          *  def move_joint_and_regule_imax(position_deadband): *
                                          *  def set_motion_and_imax_regulation_parameters():   *
                                          *  def text_file_to_vector(text_file_name):           *
                                          *******************************************************


  2) Code explanation

This explanation will follow the different stages of the computation while running the code.
The main function is currently coded in src/u_map_computation_main.py  and launches FrictionCompensation.run() which takes the library in parameters.

The first step of the computation is the data acquisition. The concerned classes are:
    - U_Map_Data_Acquisition()
    - U_Map_Data_Acquisition_Python()
There are saved in the directory inputs/.

Thus the first method to be executed in src/FrictionCompensation.run() is inputs/U_Map_Data_Aquisition.run_data_acquisition():

  It first calls self.measurement_process():

    This function realises all the measurement stages:
      - it first configures the motor
      - drives the joint to the initial position
      - starts recording of data
      - drives the joint slowly throughout the range
      - stops the record
      - returnes the measured data location. (This location depends on the library implementation)
    To complete all those stages it calls the following methods:
      - lib/Python_Robot_Lib.set_PID()
      - self.set_motion_parameters()
      - self.drive_to_initial_position()
      - lib/Python_Robot_Lib.start_record()
      - self.move_joint_and_regule_imax()
      - lib/Python_Robot_Lib.stop_record()


    *** IMPORTANT ***
      - You can choose if you want to do the Imax regulation by setting imax_regulation to True or False in FrictionCompensation.run()
      This regulation is used to improve the motion quality (slow and constant velocity). It prevents from I value wind up and from joint deadlock.
      - All the parameters of this regulation are set in set_motion_and_imax_regulation_parameters(). They will probably need to be adjusted.


    After this step the data are recorded either in a file or in vectors.

  The next method called is lib/Python_Robot_Lib.get_data():

    This function purpose is to return the measured data in float format and in vectors.
    The data format depends on the library.
    For example:
          - with ethercat_robot_lib hand data are directly recorded as float in vectors
          - with python_robot_lib hand are recorded in files in hexadecimal format

  The last method called in this stage is self.data_treatment():
    This method is coded in the mother class and realises the following treatments:
      - delete the repeated tuples (position, pid_out)
      - filter the data with a first order filter
      - Sort data per increasing position
      - Delete the repeated positions so that they appear only once with the average PID value
    The function returns two vectors of data ready for Umap computation
    To complete all those treatments it calls the following functions:
      - utils/Utilitarian.delete_repeated_tuples()
      - filter/U_Map_Filter_1o.filter_fun()
      - utils/Utilitarian.sort_data_per_increasing_position()
      - filter/U_Map_Filter_Single_Position.filter_fun()

    *** Important ***
      - Additionnal treatment on data should be added in this method
      - Other types of filter can be implemented as subclasses of U_Map_Filter() and then used in data_treatment()

  The call of self.data_treatment() finishes the data acquisition stage.

The next stage is the U_map computation. The concerned directory is output/ containing the classes U_Map_Output and U_Map_Output_file.

The second method called in src/FrictionCompensation.run() is output/U_Map_Output_File.u_map_computation(). It realises the following computation:
  - Select n equidistant and the measured data
  - Set the limit U_map position to min and max joint angle. The matching pid_out is calculated using a linear interpolation.

  If the way to calculate the frictions tables changes modifications should be implemented in this function.

Finally the umap values must be set accessible to controllers.
Thus the third and last method called in src/FrictionCompensation.run() is output/U_Map_Output_File.send_umap()
  This method saves properly umap data.
  For example:
    with python_robot_lib:
      - write Umap tables in a text file
      - send the data to the microcontroller
      To do that it calls the function:
        - lib/Python_Robot_Lib.send_u_map_to_firmware()

\section howtouseit How to use it

To launch the computation the user must create an instance:
        - of the library he wants to use
        - of FrictionCompensation indicating:
              - the joint name
              - the number of points in the u_map tables
              - the hand_number
              - the P value
              - the I value
              - the D value
              - the shift value
              - and the chosen library
Then the call to the function src/FrictionCompensation.run() will launch the process.
Currently the main is coded in the src/u_map_computation_main.py.

Here is an example of usable code to launch the code:

import roslib; roslib;load_manifest('sr_friction_compensation')
import rospy

# import of the class containing the run() function and of the library that the user wants to use
from sr_friction_compensation.u_map_compensation_main.py import FrictionCompensation
from sr_friction_compensation.lib.python_robot_lib import Python_Robot_Lib

if __name__ == "__main__":
  # instanciation of the library
  lib = Python_Robot_Lib()
  # instanciation of FrictionCompensation class
  FC = FrictionCompensation(joint_name = "FFJ4", n = 15, P=15, I=40, D=0, Shift=7, lib= lib)
  # run the process
  FC.run()

\section improvements Improvements:

  - During the measurements no precaution is taken to make sure that the joint is mooving properly. A verification on the duration of the motion
  using an exception would prevent the problems that could cause a mechanical dysfunction
          For example with the python_robot_lib:
              if a joint deadlock appends, the joint will never reach the target position and the code will full a file with useless data.
  - To work automatically with the python_robot_lib, this code should be preceded and followed per:
      - a switch of firmware (first to velocity regulation with low maximum velocity and then to either position or velocity regulation)
      - a PID tuning
  - Another great improvement would be to implement a library using a ROS instead of python subprocess to call robot lib functions.

*/
