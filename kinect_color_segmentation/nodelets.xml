<library path="lib/libsr_kinect">
  <class name = "sr_kinect/KinectColorSegmentation" type ="sr_kinect::KinectColorSegmentation" base_class_type = "nodelet::Nodelet" >
    <description>
      Nodelet that segments a point cloud filtering points on their RGB values
    </description>
  </class>
  <class name = "sr_kinect/PointSequenceDetection" type ="sr_kinect::PointSequenceDetection" base_class_type = "nodelet::Nodelet" >
    <description>
      Nodelet that orders a point cloud to obtain a phisically meaningful trajectory through all the points. The algorithm is based recursively on local proximity from a starting point. It also contains a movement detection mechanism. The output only changes when the input cloud contains enough changes compared to the last used cloud.
    </description>
  </class>
  <class name = "sr_kinect/BoxSegmentation" type ="sr_kinect::BoxSegmentation" base_class_type = "nodelet::Nodelet" >
    <description>
      Nodelet that calculates an xyz box from one of the input clouds, and apply this xyz filtering box to the other input cloud.
    </description>
  </class>
</library>
